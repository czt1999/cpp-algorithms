//
// Created by ZiT on 2021/7/17.
//

#include <array>
#include <iostream>
#include <random>

namespace sorting {

    namespace base {

        void show(int64_t *A, int64_t len) {
            for (int64_t i = 0; i < len; i++) {
                std::cout << A[i] << " ";
            }
            std::cout << "\n";
        }

        /**
         * @brief print out the given array
         * @tparam N size of the array
         */
        template<size_t N>
        void showArray(std::array<int64_t, N> arr) {
            for (int64_t e : arr) {
                std::cout << e << " ";
            }
            std::cout << "\n";
        }

        /**
         * @brief A function utility to generate a random array of given size and range.
         * @tparam size Size of the output array.
         * @param from Starting of the range.
         * @param to Ending of the range.
         * @returns std::array<int64_t , size> Random array of specified size.
         * */
        template<size_t N>
        std::array<int64_t, N> generateRandomArray(int64_t from, int64_t to) {
            assert(from < to);
            // the seed of random engine is generated by current timestamp
            auto seed = std::chrono::steady_clock::now().time_since_epoch().count();
            std::default_random_engine e(seed);
            std::uniform_int_distribution<int64_t> u(from, to);
            std::array<int64_t, N> randomArray;
            int64_t i = 0;
            while (i < N) {
                randomArray[i++] = u(e);
            }
            return randomArray;
        }

    } // namespace base
} // namespace sorting
